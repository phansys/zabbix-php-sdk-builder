#!/usr/bin/env php
<?php

/*
 * This file is part of PhpZabbixApi.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @copyright The MIT License (MIT)
 * @author confirm IT solutions GmbH, Rathausstrase 14, CH-6340 Baar
 */

use ZabbixSdkBuilder\Builder;

if (!in_array(\PHP_SAPI, ['cli', 'phpdbg', 'embed'], true)) {
    throw new \RuntimeException('Error: '.__FILE__.' must be invoked via the CLI version of PHP, not the '.\PHP_SAPI.' SAPI'.\PHP_EOL);
}

set_time_limit(0);

// Enable autoload.
require dirname(__DIR__).'/vendor/autoload.php';

// Create directory for built files.
if (!is_dir(Builder::PATH_BUILD)) {
    @mkdir(Builder::PATH_BUILD);
}

$zabbixPath = $argv[1] ?? null;

// Initialize.
$builder = new Builder($zabbixPath);

// Define template placeholders.
$templatePlaceholders = [
    'CLASSNAME_INTERFACE' => Builder::CLASSNAME_INTERFACE,
    'CLASSNAME_CONCRETE' => Builder::CLASSNAME_CONCRETE,
    'CLASSNAME_EXCEPTION' => Builder::CLASSNAME_EXCEPTION,
    'FILENAME_INTERFACE' => Builder::FILENAME_INTERFACE,
    'FILENAME_CONCRETE' => Builder::FILENAME_CONCRETE,
    'FILENAME_EXCEPTION' => Builder::FILENAME_EXCEPTION,
];

// Just loop through all available API classes and find all defined methods in these
// classes in order to initialze the API array.
$apiArray = [];

// Loop through class map.
foreach ($builder->getApiClassMap() as $resource => $class) {
    // Add resource to API array.
    $apiArray[$resource] = [];

    // Create new reflection class.
    $reflection = new \ReflectionClass($class);

    // Loop through defined methods.
    foreach ($reflection->getMethods(\ReflectionMethod::IS_PUBLIC & ~\ReflectionMethod::IS_STATIC) as $method) {
        // Add action to API array.
        if ('CZBXAPI' !== $method->class && !('user' === $resource && 'login' === $method->name) && !('user' === $resource && 'logout' === $method->name) && !$method->isConstructor() && !$method->isDestructor() && !$method->isAbstract()) {
            $apiArray[$resource][] = $method->name;
        }
    }
}

// Build concrete template.
if (!$template = file_get_contents(Builder::PATH_TEMPLATES.'/concrete.tpl.php')) {
    throw new \RuntimeException('Error.');
}

// Fetch API constant and method blocks.
preg_match('/(.*)<!START_API_CONSTANT>(.*)<!END_API_CONSTANT>(.*)<!START_API_METHOD>(.*)<!END_API_METHOD>(.*)/s', $template, $matches);

// Sanity check.
if (6 !== count($matches)) {
    throw new \RuntimeException('Template "'.Builder::PATH_TEMPLATES.'/concrete.tpl.php" parsing failed!');
}

$defines = file_get_contents($builder->getZabbixPath().'/include/defines.inc.php');
preg_match_all('{^define\(\'(?<constant_names>[^\']+)\',\s*(?!\);)(?<constant_values>.+)\)\;.*\n}m', $defines, $constantsArray);

// Initialize variable for API constants.
$apiConstants = '';

$blacklistedConstants = ['HTTPS', 'ZBX_FONTPATH'];

// Build API constants.
foreach ($constantsArray['constant_names'] as $k => $name) {
    if (0 === strpos($name, 'ZBX_STYLE_') || in_array($name, $blacklistedConstants, true)) {
        continue;
    }
    $value = $constantsArray['constant_values'][$k];

    foreach ($constantsArray['constant_names'] as $declaredName) {
        if (false !== strpos($value, $declaredName)) {
            if (version_compare(\PHP_VERSION, '5.6') >= 0) {
                $declaredNameValue = 'self::'.$declaredName;
                $value = preg_replace('#\b'.$declaredName.'\b#', $declaredNameValue, $value);
            } elseif (false !== $declaredNameKey = array_search($declaredName, $constantsArray['constant_names'], true)) {
                $declaredNameValue = $constantsArray['constant_values'][$declaredNameKey];
                $value = eval('return '.preg_replace('#\b'.$declaredName.'\b#', $declaredNameValue, $value).';');
                if (is_string($value)) {
                    $value = '\''.$value.'\'';
                }
            }
        }
    }

    $constantPlaceholders = [
        'PHP_CONST_NAME' => $name,
        'PHP_CONST_VALUE' => $value,
    ];
    $apiConstants .= $builder->replacePlaceholders($matches[2], $constantPlaceholders);
}

// Initialize variable for API methods.
$apiMethods = '';

$blacklistedMethods = [
    'checkCircleSelementsLink',
    'checkInput',
    'deleteMediaReal',
    'isReadable',
    'isWritable',
];

$anonymousFunctions = [
    'apiinfo.version',
    'user.checkauthentication',
    'user.login',
];

// Build API methods.
foreach ($apiArray as $resource => $actions) {
    foreach ($actions as $action) {
        if (in_array($action, $blacklistedMethods, true)) {
            continue;
        }

        $apiMethod = $resource.'.'.strtolower($action);
        $methodPlaceholders = [
            'API_METHOD' => $apiMethod,
            'PHP_METHOD' => $resource.ucfirst($action),
            'IS_AUTHENTICATION_REQUIRED' => in_array($apiMethod, $anonymousFunctions, true) ? 'false' : 'true',
        ];
        $apiMethods .= $builder->replacePlaceholders($matches[4], $methodPlaceholders);
    }
}

// Build concrete file content.
$fileContent = $builder->replacePlaceholders($matches[1].$apiConstants.$matches[3].$apiMethods.$matches[5], $templatePlaceholders);

// Write concrete class.
if (!file_put_contents(Builder::PATH_BUILD.'/'.Builder::FILENAME_CONCRETE, $fileContent)) {
    throw new \RuntimeException('Error.');
}

echo 'BUILT: concrete class file "'.Builder::PATH_BUILD.'/'.Builder::FILENAME_CONCRETE.'"'."\n";

// Build interface file content.
if (!$templateInterface = file_get_contents(Builder::PATH_TEMPLATES.'/interface.tpl.php')) {
    throw new \RuntimeException('Error.');
}

// Fetch API method block.
preg_match('/(.*)<!START_API_METHOD>(.*)<!END_API_METHOD>(.*)/s', $templateInterface, $matches);

// Sanity check.
if (4 !== count($matches)) {
    throw new \RuntimeException('Template "'.Builder::PATH_TEMPLATES.'/interface.tpl.php" parsing failed!');
}

// Build API methods.

$apiMethodsInterface = '';

foreach ($apiArray as $resource => $actions) {
    foreach ($actions as $action) {
        if (in_array($action, $blacklistedMethods, true)) {
            continue;
        }

        $methodPlaceholders = [
            'API_METHOD' => $resource.'.'.strtolower($action),
            'PHP_METHOD' => $resource.ucfirst($action),
        ];
        $apiMethodsInterface .= $builder->replacePlaceholders($matches[2], $methodPlaceholders);
    }
}

$fileContentInterface = $builder->replacePlaceholders($matches[1].$apiMethodsInterface.$matches[3], $templatePlaceholders);

// Write interface.
if (!file_put_contents(Builder::PATH_BUILD.'/'.Builder::FILENAME_INTERFACE, $fileContentInterface)) {
    throw new \RuntimeException('Error.');
}

echo 'BUILT: interface file "'.Builder::PATH_BUILD.'/'.Builder::FILENAME_INTERFACE.'"'."\n";

// Build exception template.
if (!$template = file_get_contents(Builder::PATH_TEMPLATES.'/exception.tpl.php')) {
    throw new \RuntimeException('Error.');
}

// Build file content.
$fileContent = $builder->replacePlaceholders($template, $templatePlaceholders);

// write abstract class
if (!file_put_contents(Builder::PATH_BUILD.'/'.Builder::FILENAME_EXCEPTION, $fileContent)) {
    throw new \RuntimeException('Error.');
}

echo 'BUILT: exception class file "'.Builder::PATH_BUILD.'/'.Builder::FILENAME_EXCEPTION.'"'."\n";
